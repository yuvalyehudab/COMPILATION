/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import java.io.PrintWriter;
import AST.*;

parser code 
{:
	public Lexer lexer;
	private PrintWriter writer;

	public Parser(Lexer lexer, PrintWriter writer)
	{
		super(lexer);
		this.lexer = lexer;
		this.writer = writer;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getCharPos());
		System.out.print("] ");
		
		writer.print("ERROR(");
		writer.print(lexer.getLine());
		writer.print(")");
		writer.close();
		
		System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
terminal IF;
terminal EQ;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal WHILE;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;
terminal ASSIGN;
terminal CLASS;
terminal NIL;
terminal ARRAY;
terminal EXTENDS;
terminal RETURN;
terminal NEW;
terminal COMMA;
terminal ELLIPSIS;
terminal LT;
terminal GT;

/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STRING;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_EXP exp;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_STMT_LIST stmtList;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence left DOT;
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIVIDE;
precedence left EQ;
precedence left LT;
precedence left GT;

/************************/
/* START WITH: decList  */
/************************/
start with decList;

/********************/
/* DERIVATION RULES */
/********************/

decList     ::=         dec:d decList:l
                    |   dec:d
                    ;

dec         ::=         varDec:d
                    |   funcDec:d
                    |   classDec:d
                    |   arrayDec:d
                    ;

varDec      ::=         ID:type ID:name                  SEMICOLON
                    |   ID:type ID:name ASSIGN exp:e     SEMICOLON
                    |   ID:type ID:name ASSIGN newExp:ne SEMICOLON
                    ;

funcDec     ::=         ID:type ID:name LPAREN            RPAREN LBRACE stmtList:stmts RBRACE
                    |   ID:type ID:name LPAREN idList:ids RPAREN LBRACE stmtList:stmts RBRACE
                    ;

classDec    ::=         CLASS ID:name                   LBRACE cFieldList:l RBRACE
                    |   CLASS ID:name EXTENDS ID:parent LBRACE cFieldList:l RBRACE
                    ;

arrayDec    ::=         ARRAY ID:name EQUALS ID:thing LBRACK RBRACK
                    ;

exp			::=		    var:v					                {: RESULT = new AST_EXP_VAR(v);          :}
					|   LPAREN exp:e RPAREN                     {: RESULT = new AST_EXP_PAREN(e);        :}
					|   exp:e1 PLUS   exp:e2		    		{: RESULT = new AST_EXP_BINOP(e1, e2, 0);:}
					|   exp:e1 MINUS  exp:e2		    		{: RESULT = new AST_EXP_BINOP(e1, e2, 1);:}
					|   exp:e1 TIMES  exp:e2			    	{: RESULT = new AST_EXP_BINOP(e1, e2, 2);:}
					|   exp:e1 DIVIDE exp:e2				    {: RESULT = new AST_EXP_BINOP(e1, e2, 3);:}
					|   exp:e1 EQ     exp:e2	    			{: RESULT = new AST_EXP_BINOP(e1, e2, 4);:}
					|   exp:e1 LT     exp:e2		    		{: RESULT = new AST_EXP_BINOP(e1, e2, 5);:}
					|   exp:e1 GT     exp:e2			    	{: RESULT = new AST_EXP_BINOP(e1, e2, 6);:}
					|   varNoExp:v LPAREN              RPAREN
					|   varNoExp:v LPAREN expList:args RPAREN
                    |         INT:i							    {: RESULT = new AST_EXP_INT(i,false);    :}
                    |   MINUS INT:i                             {: RESULT = new AST_EXP_INT(i,true);     :}
                    |   NIL                                     {: RESULT = new AST_NIL();               :}
                    |   STRING:s                                {: RESULT = new AST_STRING(s);           :}
					;

var			::=		    ID:name					    {: RESULT = new AST_VAR_SIMPLE(name);       :}
					|   var:v DOT ID:fieldName		{: RESULT = new AST_VAR_FIELD(v,fieldName); :}
					|   var:v LBRACK exp:e RBRACK	{: RESULT = new AST_VAR_SUBSCRIPT(v,e);     :}
					;

stmt		::=		    varDec:d
                    |   var:v ASSIGN exp:e     SEMICOLON							{: RESULT = new AST_STMT_ASSIGN(v,e); :}
                    |   var:v ASSIGN newExp:ne SEMICOLON
					|   RETURN       SEMICOLON
					|   RETURN exp:e SEMICOLON
					|   IF    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(   cond,body); :}
					|   WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond,body); :}
					|   varNoExp:v     ID:name LPAREN              RPAREN SEMICOLON
					|   varNoExp:v DOT ID:name LPAREN expList:args RPAREN SEMICOLON
					;

newExp      ::=         NEW ID:name                     {: RESULT = new AST_EXP_NEW_SIMPLE(name);:}
                    |   NEW ID:name LBRACK exp:e RBRACK {: RESULT = new AST_EXP_NEW_EXP(name, e);:}
                    ;

cField      ::=         varDec:d
                    |   funcDec:d
                    ;

/** Helpers **/

varNoExp    ::=		    ID:name					{: RESULT = new AST_VAR_SIMPLE(name);       :}
					|   var:v DOT ID:fieldName	{: RESULT = new AST_VAR_FIELD(v,fieldName); :}
					;

idList      ::=         ID:type ID:name COMMA idList:l
                    |   ID:type ID:name
                    ;

expList 	::=	        exp:e COMMA expList:l   {: RESULT = new AST_EXP_LIST(e,l);    :}
					|   exp:e 				    {: RESULT = new AST_EXP_LIST(e,null); :}
					;

stmtList	::=		    stmt:s	stmtList:l	{: RESULT = new AST_STMT_LIST(s,l);    :}
					|   stmt:s				{: RESULT = new AST_STMT_LIST(s,null); :}
					;

cFieldList  ::=         cField:f cFieldList:l
                    |   cField:f
                    ;
