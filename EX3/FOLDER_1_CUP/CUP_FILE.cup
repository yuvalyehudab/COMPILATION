/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import java.io.PrintWriter;
import AST.*;

parser code 
{:
	public Lexer lexer;
	private PrintWriter file_writer;

	public Parser(Lexer lexer, PrintWriter file_writer)
	{
		super(lexer);
		this.lexer = lexer;
		this.file_writer = file_writer;
		AST_Node_Serial_Number.setWriter(file_writer);
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getCharPos());
		System.out.print("] ");
		
		file_writer.format("ERROR(%d)", lexer.getLine());
		file_writer.close();
		System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	System.out.print(s.sym);
	if (s.value != null)
	{
		System.out.print("(");
		System.out.print(s.value);
		System.out.print(")");
	}
	System.out.print("\n");
	AST_Node_Serial_Number.setLine(lexer.getLine());
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
terminal IF;
terminal LT;
terminal EQ;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal CLASS;
terminal COMMA;
terminal WHILE;
terminal RETURN;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal ASSIGN;
terminal SEMICOLON;
terminal NIL;
terminal ARRAY;
terminal EXTENDS;
terminal NEW;
terminal ELLIPSIS;
terminal GT;

/*************/
/* TERMINALS */
/*************/
terminal String ID;
terminal Integer INT;
terminal String STRING;
terminal UMINUS;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_DEC		dec;
non terminal AST_DEC		cField;
non terminal AST_DEC_VAR	varDec;
non terminal AST_DEC_ARRAY	arrayDec;
non terminal AST_DEC_FUNC	funcDec;
non terminal AST_DEC_CLASS	classDec;
non terminal AST_DEC_LIST	decList;
non terminal AST_DEC_LIST	cFieldList;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_EXP 		exp;
non terminal AST_EXP_VAR	varExp;
non terminal AST_EXP_CALL	callExp;
non terminal AST_EXP_BINOP	binopExp;
non terminal AST_EXP_LIST	expListComma;
non terminal AST_EXP_NEW 	newExp;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_STMT stmt;
non terminal AST_STMT_LIST stmtList;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_TYPE_NAME		typeName;
non terminal AST_TYPE_NAME_LIST	typeNameListComma;
non terminal AST_TYPE_NAME_LIST	typeNameListSemicolon;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence left ASSIGN;
precedence left EQ;
precedence left LT, GT;
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIVIDE;
precedence left LBRACK;
precedence left LPAREN;
precedence left DOT;

/************************/
/* START WITH: decList */
/************************/
start with decList;

/********************/
/* DERIVATION RULES */
/********************/
decList		::=		dec:d decList:l	{: RESULT = new AST_DEC_LIST(d, l, dleft);    :}
					| dec:d			{: RESULT = new AST_DEC_LIST(d, null, dleft); :};

dec			::=		varDec:d		{: RESULT = d; :}
					| arrayDec:d	{: RESULT = d; :}
					| funcDec:d		{: RESULT = d; :}
					| classDec:d	{: RESULT = d; :};
										
varDec		::=		ID:type ID:var SEMICOLON	            {: RESULT = new AST_DEC_VAR(type, var, null, typeleft); :}
					| ID:type ID:var ASSIGN exp:e SEMICOLON {: RESULT = new AST_DEC_VAR(type, var, e, typeleft);    :}
					| ID:type ID:var ASSIGN newExp:ne SEMICOLON {: RESULT = new AST_DEC_VAR(type, var, ne, typeleft);    :};

arrayDec	::=		ARRAY:a ID:name EQ ID:type LBRACK RBRACK	{: RESULT = new AST_DEC_ARRAY(name, type, aleft);	:};

funcDec		::=		ID:ret ID:name LPAREN typeNameListComma:tnl RPAREN LBRACE stmtList:body RBRACE
					{: RESULT = new AST_DEC_FUNC(ret, name, tnl, body, retleft); :}
					| ID:ret ID:name LPAREN RPAREN LBRACE stmtList:body RBRACE
					{: RESULT = new AST_DEC_FUNC(ret, name, null, body, retleft); :};

classDec	::=		CLASS:c ID:name LBRACE cFieldList:l RBRACE	{: RESULT = new AST_DEC_CLASS(name, l, null, cleft); :}
					| CLASS ID:name EXTENDS ID:father LBRACE cFieldList:l RBRACE	{: RESULT = new AST_DEC_CLASS(name, l, father, nameleft); :};

stmtList	::=		stmt:s stmtList:l	{: RESULT = new AST_STMT_LIST(s, l, sleft);    :}
					| stmt:s			{: RESULT = new AST_STMT_LIST(s, null, sleft); :};
					
stmt		::=		varDec:v                                                    {: RESULT = new AST_STMT_DEC_VAR(v, vleft);		:}
					| callExp:callExp SEMICOLON									{: RESULT = new AST_STMT_CALL(callExp, callExpleft);		:}
					| RETURN exp:e	SEMICOLON									{: RESULT = new AST_STMT_RETURN(e, eleft);			:}
					| RETURN:r		SEMICOLON									{: RESULT = new AST_STMT_RETURN(null, rleft);		:}
					| varExp:v ASSIGN exp:e SEMICOLON							{: RESULT = new AST_STMT_ASSIGN(v, e, vleft);		:}
					| varExp:v ASSIGN newExp:ne SEMICOLON						{: RESULT = new AST_STMT_ASSIGN(v, ne, vleft);		:}
					| IF:i    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(   cond, body, ileft);	:}
					| WHILE:w LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond, body, wleft);	:};

exp			::=		INT:i			{: RESULT = new AST_EXP_INT(i, ileft);		:}
					| MINUS:m INT:i	{: RESULT = new AST_EXP_INT(-i, mleft);	:}
					| NIL:n			{: RESULT = new AST_EXP_NIL(nleft); 		:}
					| STRING:s		{: RESULT = new AST_EXP_STRING(s, sleft);	:}
					| varExp:v		{: RESULT = v; :}
					| callExp:e		{: RESULT = e; :}
					| LPAREN exp:e RPAREN	{: RESULT = e; :}
					| binopExp:e	{: RESULT = e; :};

varExp		::=		ID:name							{: RESULT = new AST_EXP_VAR_SIMPLE(name, nameleft);       :}
					| varExp:v DOT ID:fieldName		{: RESULT = new AST_EXP_VAR_FIELD(v, fieldName, vleft); :} 
					| varExp:v LBRACK exp:e RBRACK	{: RESULT = new AST_EXP_VAR_SUBSCRIPT(v, e, vleft);     :};

binopExp	::=		exp:e1 PLUS exp:e2		{: RESULT = new AST_EXP_BINOP(e1, e2, 0, e1left); :}
					| exp:e1 TIMES exp:e2	{: RESULT = new AST_EXP_BINOP(e1, e2, 1, e1left); :}
					| exp:e1 LT exp:e2		{: RESULT = new AST_EXP_BINOP(e1, e2, 2, e1left); :}
					| exp:e1 EQ exp:e2		{: RESULT = new AST_EXP_BINOP(e1, e2, 3, e1left); :}
					| exp:e1 MINUS exp:e2	{: RESULT = new AST_EXP_BINOP(e1, e2, 4, e1left); :}
					| exp:e1 DIVIDE exp:e2	{: RESULT = new AST_EXP_BINOP(e1, e2, 5, e1left); :}
					| exp:e1 GT exp:e2		{: RESULT = new AST_EXP_BINOP(e1, e2, 6, e1left); :};

callExp		::=		ID:funcName LPAREN expListComma:el	RPAREN	{: RESULT = new AST_EXP_CALL(null, 	funcName, el, funcNameleft);	:}
					| ID:funcName LPAREN				RPAREN	{: RESULT = new AST_EXP_CALL(null, 	funcName, null, funcNameleft);:}
					| varExp:v DOT ID:funcName LPAREN	RPAREN	{: RESULT = new AST_EXP_CALL(v, 		funcName, null, vleft);:}
					| varExp:v DOT ID:funcName LPAREN expListComma:el	RPAREN	{: RESULT = new AST_EXP_CALL(v, 	funcName, el, vleft);:};
					
newExp		::=			NEW:n ID:name	LBRACK exp:e	RBRACK	{:	RESULT = new AST_EXP_NEW(name, e, nleft);	:}
					|	NEW:n ID:name	       			      	{:	RESULT = new AST_EXP_NEW(name, null, nleft);	:};
					
expListComma	::=		exp:e COMMA expListComma:el	{: RESULT = new AST_EXP_LIST(e, el, eleft);   :}
						| exp:e						{: RESULT = new AST_EXP_LIST(e, null, eleft); :};

typeName				::=		ID:type ID:name									{: RESULT = new AST_TYPE_NAME(type, name, typeleft);    :};
typeNameListComma		::=		typeName:tn COMMA typeNameListComma:tnl			{: RESULT = new AST_TYPE_NAME_LIST(tn, tnl, tnleft);  :}
								| typeName:tn									{: RESULT = new AST_TYPE_NAME_LIST(tn, null, tnleft); :};

cField      ::=         varDec:d    {: RESULT = d;	:}
                    |   funcDec:d   {: RESULT = d;	:};
cFieldList  ::=         cField:f cFieldList:l   {: RESULT = new AST_DEC_LIST(f, l, fleft);   :}
                    |   cField:f                {: RESULT = new AST_DEC_LIST(f, null, fleft);:};
/*typeNameListSemicolon	::=		typeName:tn SEMICOLON typeNameListSemicolon:tnl	{: RESULT = new AST_TYPE_NAME_LIST(tn, tnl, tnleft);  :}
								| typeName:tn SEMICOLON                         {: RESULT = new AST_TYPE_NAME_LIST(tn, null, tnleft); :};*/

